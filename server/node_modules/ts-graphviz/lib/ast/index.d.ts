import {
  Compass,
  AttributeKey,
  ASTType,
  DotObjectModel,
  RootGraphModel,
  EdgeModel,
  NodeModel,
  SubgraphModel,
  ModelsContext,
} from '../common/index.js';

/**
 * @group AST
 */
interface FilePosition {
  offset: number;
  line: number;
  column: number;
}
/**
 * @group AST
 */
interface FileRange {
  start: FilePosition;
  end: FilePosition;
}
/**
 * AST common propaties.
 * @group AST
 */
interface ASTCommonPropaties {
  location?: FileRange;
}
/**
 * @group AST
 */
declare type DotASTPropaties = ASTCommonPropaties;
/**
 * @group AST
 */
interface GraphASTPropaties extends ASTCommonPropaties {
  id?: LiteralASTNode;
  directed: boolean;
  strict: boolean;
}
/**
 * @group AST
 */
interface LiteralASTPropaties<T extends string = string> extends ASTCommonPropaties {
  value: T;
  quoted: boolean | 'html';
}
/**
 * @group AST
 */
interface SubgraphASTPropaties extends ASTCommonPropaties {
  id?: LiteralASTNode;
}
/**
 * @group AST
 */
interface NodeASTPropaties extends ASTCommonPropaties {
  id: LiteralASTNode;
}
/**
 * @group AST
 */
interface EdgeASTPropaties extends ASTCommonPropaties {
  targets: [from: EdgeTargetASTNode, to: EdgeTargetASTNode, ...rest: EdgeTargetASTNode[]];
}
/**
 * @group AST
 */
interface NodeRefASTPropaties extends ASTCommonPropaties {
  id: LiteralASTNode;
  port?: LiteralASTNode;
  compass?: LiteralASTNode<Compass>;
}
/**
 * @group AST
 */
declare type NodeRefGroupASTPropaties = ASTCommonPropaties;
/**
 * @group AST
 */
interface AttributeASTPropaties<T extends AttributeKey = AttributeKey> extends ASTCommonPropaties {
  key: LiteralASTNode<T>;
  value: LiteralASTNode;
}
/**
 * @group AST
 */
interface AttributeListASTPropaties extends ASTCommonPropaties {
  kind: 'Graph' | 'Edge' | 'Node';
}
/**
 * @group AST
 */
declare type CommentKind = 'Block' | 'Slash' | 'Macro';
/**
 * @group AST
 */
interface CommentASTPropaties extends ASTCommonPropaties {
  kind: CommentKind;
  value: string;
}
/**
 * AST node.
 * @group AST
 */
interface ASTBaseNode {
  /**
   * Every leaf interface that extends ASTBaseNode
   * must specify a type property.
   */
  type: ASTType;
}
/**
 * @group AST
 */
interface ASTBaseParentNode<STMT extends ASTBaseNode = ASTBaseNode> extends ASTBaseNode {
  children: STMT[];
}
/**
 * @group AST
 */
interface LiteralASTNode<T extends string = string> extends ASTBaseParentNode<never>, LiteralASTPropaties<T> {
  type: 'Literal';
}
/**
 * @group AST
 */
interface DotASTNode extends ASTBaseParentNode<StatementASTNode>, DotASTPropaties {
  type: 'Dot';
}
/**
 * Graph AST object.
 * @group AST
 */
interface GraphASTNode extends ASTBaseParentNode<ClusterStatementASTNode>, GraphASTPropaties {
  type: 'Graph';
}
/**
 * Attribute AST object.
 * @group AST
 */
interface AttributeASTNode<T extends AttributeKey = AttributeKey>
  extends ASTBaseParentNode<never>,
    AttributeASTPropaties<T> {
  type: 'Attribute';
}
/**
 * Comment AST object.
 * @group AST
 */
interface CommentASTNode extends ASTBaseParentNode<never>, CommentASTPropaties {
  type: 'Comment';
}
/**
 * Attributes AST object.
 * @group AST
 */
interface AttributeListASTNode extends ASTBaseParentNode<AttributeASTNode | CommentASTNode>, AttributeListASTPropaties {
  type: 'AttributeList';
}
/**
 * NodeRef AST object.
 * @group AST
 */
interface NodeRefASTNode extends ASTBaseParentNode<never>, NodeRefASTPropaties {
  type: 'NodeRef';
}
/**
 * NodeRefGroup AST object.
 * @group AST
 */
interface NodeRefGroupASTNode extends ASTBaseParentNode<NodeRefASTNode>, NodeRefGroupASTPropaties {
  type: 'NodeRefGroup';
}
/**
 * @group AST
 */
declare type EdgeTargetASTNode = NodeRefASTNode | NodeRefGroupASTNode;
/**
 * Edge AST object.
 * @group AST
 */
interface EdgeASTNode extends ASTBaseParentNode<AttributeASTNode | CommentASTNode>, EdgeASTPropaties {
  type: 'Edge';
}
/**
 * Node AST object.
 * @group AST
 */
interface NodeASTNode extends ASTBaseParentNode<AttributeASTNode | CommentASTNode>, NodeASTPropaties {
  type: 'Node';
}
/**
 * Subgraph AST object.
 * @group AST
 */
interface SubgraphASTNode extends ASTBaseParentNode<ClusterStatementASTNode>, SubgraphASTPropaties {
  type: 'Subgraph';
}
/**
 * @group AST
 */
declare type StatementASTNode = GraphASTNode | CommentASTNode;
/**
 * @group AST
 */
declare type ClusterStatementASTNode =
  | AttributeASTNode
  | AttributeListASTNode
  | EdgeASTNode
  | NodeASTNode
  | SubgraphASTNode
  | CommentASTNode;
/**
 * @group AST
 */
declare type ASTNode =
  | LiteralASTNode
  | DotASTNode
  | GraphASTNode
  | AttributeASTNode
  | CommentASTNode
  | AttributeListASTNode
  | NodeRefASTNode
  | NodeRefGroupASTNode
  | EdgeASTNode
  | NodeASTNode
  | SubgraphASTNode;
/**
 * @group AST
 */
declare type ASTChildNode<T> = T extends ASTBaseParentNode<infer C> ? C : never;

/**
 * @group Create AST
 * @alpha
 */
interface BuilderOptions {
  locationFunction: () => FileRange;
}
/**
 * @group Create AST
 * @alpha
 */
interface CreateElement {
  <T extends string>(
    type: 'Literal',
    props: LiteralASTPropaties<T>,
    children: ASTChildNode<LiteralASTNode>[],
  ): LiteralASTNode<T>;
  (type: 'Literal', props: LiteralASTPropaties, children: ASTChildNode<LiteralASTNode>[]): LiteralASTNode;
  (type: 'Dot', props: DotASTPropaties, children: ASTChildNode<DotASTNode>[]): DotASTNode;
  (type: 'Graph', props: GraphASTPropaties, children: ASTChildNode<GraphASTNode>[]): GraphASTNode;
  (type: 'Attribute', props: AttributeASTPropaties, children: ASTChildNode<AttributeASTNode>[]): AttributeASTNode;
  (type: 'Comment', props: CommentASTPropaties, children: ASTChildNode<CommentASTNode>[]): CommentASTNode;
  (
    type: 'AttributeList',
    props: AttributeListASTPropaties,
    children: ASTChildNode<AttributeListASTNode>[],
  ): AttributeListASTNode;
  (type: 'NodeRef', props: NodeRefASTPropaties, children: ASTChildNode<NodeRefASTNode>[]): NodeRefASTNode;
  (
    type: 'NodeRefGroup',
    props: NodeRefGroupASTPropaties,
    children: ASTChildNode<NodeRefGroupASTNode>[],
  ): NodeRefGroupASTNode;
  (type: 'Edge', props: EdgeASTPropaties, children: ASTChildNode<EdgeASTNode>[]): EdgeASTNode;
  (type: 'Node', props: NodeASTPropaties, children: ASTChildNode<NodeASTNode>[]): NodeASTNode;
  (type: 'Subgraph', props: SubgraphASTPropaties, children: ASTChildNode<SubgraphASTNode>[]): SubgraphASTNode;
}
/**
 * @group Create AST
 * @alpha
 */
interface ASTBuilder {
  createElement: CreateElement;
}

/**
 * @group Create AST
 */
declare class Builder implements ASTBuilder {
  private options?;
  /** @internal */
  private getLocation;
  constructor(options?: Partial<BuilderOptions> | undefined);
  createElement<T extends ASTNode>(type: T['type'], props: any, children: ASTChildNode<T>[]): T;
}

/**
 * @group Create AST
 */
declare const createElement: CreateElement;

/**
 * @group Convert AST to DOT
 */
declare type IndentStyle = 'space' | 'tab';
/**
 * @group Convert AST to DOT
 */
declare type EndOfLine = 'lf' | 'crlf';
/**
 * @group Convert AST to DOT
 * @alpha
 */
interface PrintOptions {
  indentStyle?: IndentStyle;
  indentSize?: number;
  endOfLine?: EndOfLine;
}
/**
 * @group Convert AST to DOT
 * @alpha
 */
interface PrintContext extends Required<PrintOptions> {
  directed: boolean;
  print(ast: ASTNode): string;
}
/**
 * @group Convert AST to DOT
 * @alpha
 */
interface PrintPlugin<T extends ASTNode = ASTNode> {
  match(ast: ASTNode): boolean;
  print(context: PrintContext, ast: T): string;
}

/**
 * @group Convert AST to DOT
 */
declare class Printer {
  #private;
  private options;
  constructor(options?: PrintOptions);
  print(ast: ASTNode): string;
}

/**
 * Stringify Graphviz AST Node.
 *
 * @param ast Graphviz AST node.
 * @returns DOT language string.
 * @group Convert AST to DOT
 */
declare function stringify(ast: ASTNode, options?: PrintOptions): string;

interface IFilePosition {
  offset: number;
  line: number;
  column: number;
}
interface IFileRange {
  start: IFilePosition;
  end: IFilePosition;
  source: string;
}
interface ILiteralExpectation {
  type: 'literal';
  text: string;
  ignoreCase: boolean;
}
interface IClassParts extends Array<string | IClassParts> {}
interface IClassExpectation {
  type: 'class';
  parts: IClassParts;
  inverted: boolean;
  ignoreCase: boolean;
}
interface IAnyExpectation {
  type: 'any';
}
interface IEndExpectation {
  type: 'end';
}
interface IOtherExpectation {
  type: 'other';
  description: string;
}
declare type Expectation =
  | ILiteralExpectation
  | IClassExpectation
  | IAnyExpectation
  | IEndExpectation
  | IOtherExpectation;
declare class SyntaxError$1 extends Error {
  static buildMessage(expected: Expectation[], found: string | null): string;
  message: string;
  expected: Expectation[];
  found: string | null;
  location: IFileRange;
  name: string;
  constructor(message: string, expected: Expectation[], found: string | null, location: IFileRange);
  format(
    sources: {
      source: string;
      text: string;
    }[],
  ): string;
}

/**
 * @group Convert DOT to AST
 */
declare type Rule =
  | 'Dot'
  | 'Graph'
  | 'Node'
  | 'Edge'
  | 'AttributeList'
  | 'Attribute'
  | 'Subgraph'
  | 'ClusterStatements';
/**
 * @group Convert DOT to AST
 */
interface CommonParseOptions {
  filename?: string;
}
/**
 * @group Convert DOT to AST
 */
interface ParseOptions<T extends Rule> extends CommonParseOptions {
  startRule?: T;
}
/**
 * @throws {@link SyntaxError}
 * @group Convert DOT to AST
 */
declare function parse(input: string): DotASTNode;
declare function parse(input: string, options?: ParseOptions<'Dot'>): DotASTNode;
declare function parse(input: string, options?: ParseOptions<'Graph'>): GraphASTNode;
declare function parse(input: string, options?: ParseOptions<'Node'>): NodeASTNode;
declare function parse(input: string, options?: ParseOptions<'Edge'>): EdgeASTNode;
declare function parse(input: string, options?: ParseOptions<'AttributeList'>): AttributeListASTNode;
declare function parse(input: string, options?: ParseOptions<'Attribute'>): AttributeASTNode;
declare function parse(input: string, options?: ParseOptions<'Subgraph'>): SubgraphASTNode;
declare function parse(input: string, options?: ParseOptions<'ClusterStatements'>): ClusterStatementASTNode[];
declare function parse(input: string, options?: ParseOptions<Rule>): ASTNode | ClusterStatementASTNode[];
/**
 * @group Convert DOT to AST
 */
declare const SyntaxError: typeof SyntaxError$1;

/**
 * @group AST
 */
declare type ModelToAST<T> = T extends DotObjectModel<infer U>
  ? U extends 'Graph'
    ? GraphASTNode | DotASTNode
    : U extends 'AttributeList'
    ? AttributeListASTNode
    : U extends 'Edge'
    ? EdgeASTNode
    : U extends 'Node'
    ? NodeASTNode
    : U extends 'Subgraph'
    ? SubgraphASTNode
    : never
  : never;
/**
 * @group Convert Model to AST
 * @alpha
 */
interface ConvertFromModelOptions {
  commentKind?: CommentKind;
}
/**
 * @group Convert Model to AST
 * @alpha
 */
interface ConvertFromModelContext extends Required<ConvertFromModelOptions> {
  convert<T extends DotObjectModel>(model: T): ModelToAST<T>;
}
/**
 * @group Convert Model to AST
 * @alpha
 */
interface ConvertFromModelPlugin<T extends DotObjectModel> {
  match(model: T): boolean;
  convert(context: ConvertFromModelContext, model: T): ModelToAST<T>;
}

/**
 * @group Convert Model to AST
 */
declare class FromModelConverter {
  #private;
  private options;
  constructor(options?: ConvertFromModelOptions);
  convert<T extends DotObjectModel>(model: T): ModelToAST<T>;
}

/**
 * @group Convert Model to AST
 */
declare function fromModel<T extends DotObjectModel>(model: T, options?: ConvertFromModelOptions): ModelToAST<T>;

/**
 * @group AST
 */
declare type ModelOf<T> = T extends 'Dot' | 'Graph'
  ? RootGraphModel
  : T extends 'Edge'
  ? EdgeModel
  : T extends 'Node'
  ? NodeModel
  : T extends 'Subgraph'
  ? SubgraphModel
  : never;
/**
 * @group AST
 */
declare type ASTToModel<T> = T extends {
  type: infer U;
}
  ? ModelOf<U>
  : never;
/**
 * @group Convert AST to Model
 * @beta
 */
declare type ToModelConvertableASTNode = DotASTNode | GraphASTNode | SubgraphASTNode | NodeASTNode | EdgeASTNode;
/**
 * @group Convert AST to Model
 * @alpha
 */
interface ConvertToModelOptions {
  models?: Partial<ModelsContext>;
}
/**
 * @group Convert AST to Model
 * @alpha
 */
interface ConvertToModelContext {
  models: ModelsContext;
  convert<T extends ToModelConvertableASTNode>(ast: T): ASTToModel<T>;
}
/**
 * @group Convert AST to Model
 * @alpha
 */
interface ConvertToModelPlugin<T extends ToModelConvertableASTNode = ToModelConvertableASTNode> {
  match(ast: T): boolean;
  convert(context: ConvertToModelContext, ast: T): ASTToModel<T>;
}

/**
 * @group Convert AST to Model
 * @alpha
 */
declare class ToModelConverter {
  private options;
  /** @hidden */
  protected plugins: ConvertToModelPlugin<ToModelConvertableASTNode>[];
  constructor(options?: ConvertToModelOptions);
  /**
   * Convert AST to Model.
   *
   * @param ast AST node.
   * @alpha
   */
  convert<T extends ToModelConvertableASTNode>(ast: T): ASTToModel<T>;
}

/**
 * @group Convert AST to Model
 * @beta
 */
declare function toModel<T extends ToModelConvertableASTNode>(ast: T, options?: ConvertToModelOptions): ASTToModel<T>;

export {
  ASTBaseNode,
  ASTBaseParentNode,
  ASTBuilder,
  ASTChildNode,
  ASTCommonPropaties,
  ASTNode,
  ASTToModel,
  AttributeASTNode,
  AttributeASTPropaties,
  AttributeListASTNode,
  AttributeListASTPropaties,
  Builder,
  BuilderOptions,
  ClusterStatementASTNode,
  CommentASTNode,
  CommentASTPropaties,
  CommentKind,
  CommonParseOptions,
  ConvertFromModelContext,
  ConvertFromModelOptions,
  ConvertFromModelPlugin,
  ConvertToModelContext,
  ConvertToModelOptions,
  ConvertToModelPlugin,
  CreateElement,
  DotASTNode,
  DotASTPropaties,
  EdgeASTNode,
  EdgeASTPropaties,
  EdgeTargetASTNode,
  EndOfLine,
  FilePosition,
  FileRange,
  FromModelConverter,
  GraphASTNode,
  GraphASTPropaties,
  IndentStyle,
  LiteralASTNode,
  LiteralASTPropaties,
  ModelOf,
  ModelToAST,
  NodeASTNode,
  NodeASTPropaties,
  NodeRefASTNode,
  NodeRefASTPropaties,
  NodeRefGroupASTNode,
  NodeRefGroupASTPropaties,
  ParseOptions,
  PrintContext,
  PrintOptions,
  PrintPlugin,
  Printer,
  Rule,
  StatementASTNode,
  SubgraphASTNode,
  SubgraphASTPropaties,
  SyntaxError,
  ToModelConvertableASTNode,
  ToModelConverter,
  createElement,
  fromModel,
  parse,
  stringify,
  toModel,
};
